# Heavily based on https://github.com/kaushalmodi/dotfiles/blob/master/.tmux.conf

# * PREFIX
set    -g prefix C-a		 # Change prefix to Ctrl-a
unbind C-b 					     # Unbind default prefix forward
bind   a send-prefix		 # Enable multiplexer inside tmux

# * Source config
unbind r # unbind default binding to force redraw of attached client
bind   r source-file ~/.tmux.conf \; display "Config reloaded..."

# * Pane Management
set   -g pane-base-index 1   # start pane indices at 1
bind   z resize-pane -Z      # zoom/unzoom the current pane
# If the window has >1 panes kill them without confirming. But confirm before kill
# the last pane (along with its window) in a window
bind   x if "tmux display -p \"#{window_panes}\" | grep ^1\$" \
    "confirm-before -p \"Kill the only pane in window? It will kill this window too! (y/n)\" kill-pane" \
    "kill-pane"
bind   C clear-history \; display "Cleared history of the current pane."
unbind C-p
bind   C-p run -b "tmux set-buffer '#{pane_current_path}' " \; display "Copied current path '#{pane_current_path}' to the paste buffer."

# ** Window <-join/split-> Pane
# Convert a window from current or any other session to a pane
bind   u command-prompt -p "Join pane from [sess:]win# (ex: kmodi:3 or 2(from current session)):" "join-pane -s '%%'"
# Convert a pane to a window in current or any other session
bind   U command-prompt -p "Send pane to sess or sess:win# or win# (ex: kmodi or kmodi:3 or 2(of current session)):" "join-pane -t '%%'"

# ** Select Panes
bind   o select-pane -t :.+  # cycle to the next pane number
bind   O select-pane -t :.-  # cycle to the previous pane number

# *** Switch panes using Alt-arrow without prefix (including vim)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind  -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind  -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind  -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind  -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind  -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# PREFIX \ : last-pane or select-pane -l, switch to the last active pane
# PREFIX h : select-pane -L, switch to the pane on the left
# PREFIX l : select-pane -R, switch to the pane on the right
# PREFIX k : select-pane -U, switch to the pane on the top
# PREFIX j : select-pane -D, switch to the pane on the bottom

# ** Resize Panes
bind  -r   h resize-pane -L 2
bind  -r C-h resize-pane -L 2
bind  -r   j resize-pane -D 2
bind  -r C-j resize-pane -D 2
bind  -r   k resize-pane -U 2
bind  -r C-k resize-pane -U 2
unbind l # unbind default binding for `last-window`
bind  -r   l resize-pane -R 2
bind  -r C-l resize-pane -R 2

# ** Split Panes
unbind '"'
unbind %
bind   v split-window -c "#{pane_current_path}" -h
bind   s split-window -c "#{pane_current_path}" -v

# * Window Management
set   -g base-index 1 # start window indices at 1
# automatically renumber the windows
# http://unix.stackexchange.com/questions/21742/renumbering-windows-in-tmux
set   -g renumber-windows on

bind C-d confirm-before -p "Load default pane layout? (y/n)" "source-file ~/.tmux/sessions/default"

bind C-f new-window -c "#{pane_current_path}"
bind C-e command-prompt -p "New name for this window:" "rename-window '%%'"
unbind L # unbind default binding for `switch-client -l`
bind   L list-windows -F '#{window_index}:#{window_name}: #{?pane_dead, (dead), (not dead)}'﻿
unbind & # unbind default binding for `kill-window`
bind C-c confirm-before -p "Kill this window? (y/n)" kill-window
# Move the current window to another window index in the same or any other session
bind   m command-prompt -p "Move window to sess or sess:win# or win# (ex: kmodi or kmodi:3 or 2(of current session)):" "move-window -t '%%'"
# Move or bring a window from a different session to the current one
bind   M command-prompt -p "Move the window from sess:win# (ex: kmodi:3):" "move-window -s '%%'"

# ** Window Navigation
bind C-z last-window # switch to last active window
# Allow repeats for next/previous-window
bind -r -n [ previous-window
bind -r -n ] next-window
# switch to another window by name
bind   w split-window "tmux lsw | percol --initial-index `tmux lsw | awk '/active.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux select-window -t"
# PREFIX # : switches to window with index=#

# ** Swap Windows
bind   N move-window -r # renumber the windows
unbind  , # unbind default binding for `rename-window`
bind -r , swap-window -t -1 # move window one position to the left
bind -r < swap-window -t -1 # move window one position to the left
unbind  . # unbind default binding to move window to user provided index
bind -r . swap-window -t +1 # move window one position to the right
bind -r > swap-window -t +1 # move window one position to the right
unbind t # unbind default binding to show time
bind   t swap-window -t 1 # swap the current window's position with window # 1, move it to the top

# ** Split Window
unbind & # unbind default binding for `split-window -h`
bind - split-window -v -c '#{pane_current_path}' # vertical split
bind | split-window -h -c '#{pane_current_path}' # horizontal split

# * Session Management
bind C-t command-prompt -p "New name for this session:" "rename-session '%%'"
#bind   b switch-client -l # switch to previously selected session
# switch to another session by name
#bind   S split-window "tmux ls | percol --initial-index `tmux ls | awk '/attached.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux switch-client -t"
# switch to ANY window in ANY session by name
#bind   s split-window "tmux ls | cut -d: -f1 | xargs -I SESSION tmux lsw -F 'SESSION:#{window_name}' -t SESSION | percol --initial-index `tmux ls | cut -d: -f1 | xargs -I SESSION tmux lsw -F '___#{session_attached}#{window_active}___' -t SESSION | awk '/___11___/ {print NR-1}'` | xargs tmux switch-client -t"
# tmux kill-session -t NAME/SESSIONNUMBER # Kill session
# quit session
bind C-x confirm-before -p "Kill this session? (y/n)" kill-session

# * Mouse
if-shell '[[ $(echo "$(tmux -V | cut -d" " -f2 | sed "s/[^0-9.]*//g") < 2.1" | bc) -eq 1 ]]' \
    'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on' \
    'set -g mouse on'

# * Window Title
set   -g set-titles on
set   -g set-titles-string '#h @ #S'

# * Status Bar
set   -g status-interval     1 # default = 15 seconds
set   -g status-justify      left

# ** Left Status
set   -g status-left-length  20
set   -g status-left         "#[fg=colour232,bg=colour255,nobold] #h "

# ** Right Status
set   -g status-right-length 150
set   -g status-right 		 " #{?client_prefix,#[reverse] ^H #[noreverse] ,} #[fg=colour255,bold] #{=50:pane_current_path} #[fg=colour232,bg=colour255,nobold] %d-%b %H:%M"

# * Colors

# ** Status Bar Colors
set  -g status-bg 					  '#666666'
set  -g status-fg 					  '#AAAAAA'

# ** Message Colors
set  -g message-fg 				  	  colour232
set  -g message-bg 				  	  yellow
set  -g message-command-fg 		  	  blue
set  -g message-command-bg 		  	  colour232

# ** Window Status Colors
setw -g window-status-current-bg	  green
setw -g window-status-current-fg	  white
setw -g window-status-current-format ' #F#I:#W~#(pwd="#{pane_current_path}"; echo ${pwd####*/}) '
setw -g window-status-bg			  '#666666'
setw -g window-status-fg	  		  white
setw -g window-status-format ' #F#I:#W~#(pwd="#{pane_current_path}"; echo ${pwd####*/}) '

# ** Pane Colors
set   -g pane-border-fg 			  black
set   -g pane-active-border-fg 		  brightred

# * Activity
# Notify when a window has activity
# This quick snippet will have tmux notify you in the status area when a
# window has activity:
setw  -g monitor-activity off
set   -g visual-activity  off # Display message telling that an activity happened (on/off)
# It lets me know that there is activity in a non-active window
# To try this, enter `sleep 10 && echo “Hi”` in a window and switch to
# another window.

# # Notify when a window has a content alert
# setw  -g monitor-content "--[A-Za-z][A-Za-z]sim Done--" # This string appears when a sim finishes, alert then # incompatible with tmux 2.0+
# # setw  -g monitor-content "" # Disable monitor-content
# set   -g visual-content  on # Display message telling that a content alert was triggered (on/off) # incompatible with tmux 2.0+

# * Command Prompt
# Move focus to command prompt. tmux commands can be entered there directly
# without using the `tmux` prefix and it also supports auto-complete.
# default command-prompt binding "PREFIX :" also works

# * Audible and Visual Bells
set   -g bell-action any
set   -g bell-on-alert off
set   -g visual-bell off

# * Copy & Paste
setw  -g mode-keys vi # use vim bindings in copy mode
bind  -t vi-copy v begin-selection
bind  -t vi-copy y copy-selection
bind  p paste-buffer
bind   ` copy-mode
# default: = select buffer to paste
bind C-o command-prompt -p "Output session history to: "  -I "~/tmux.history" "capture-pane -S -1000000 ; save-buffer %1 ; delete-buffer"

# * Terminal Setting

# Update environment
# Fix macOS launch issue (no need for pbcopy)
if-shell 'test "$(uname -s)" = Darwin' 'set-option -g default-command "exec reattach-to-user-namespace -l zsh"'

set -g update-environment "SSH_AUTH_SOCK \
                           SSH_CONNECTION \
                           DISPLAY"

# Uncomment below when using xterm
set -g default-terminal "xterm-256color"

# Uncomment below when using st (by suckless.org)
# set -g default-terminal "st-256color"
# # https://sunaku.github.io/tmux-24bit-color.html
# # st supports 24-bit color, so enable support for that in tmux
# set -ga terminal-overrides ",st-256color:Tc"
# setw -g xterm-keys off

# * Other Options

# ** Server Options
set -s escape-time       0 # Allows for faster key repetition

# ** Session Options
set -g history-limit     1000000
set -g display-time      2000 # Duration of tmux display messages in milliseconds

# ** TPM
# *** Tmux plugin manager
set -g @plugin 'tmux-plugins/tpm'
# *** Saves tmux environment
set -g @plugin 'tmux-plugins/tmux-resurrect'
# *** Enable copy to system clipboard
set -g @plugin 'tmux-plugins/tmux-yank'

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run '~/.tmux/plugins/tpm/tpm'

unbind C-r
bind C-r confirm-before -p "Resurrect saved tmux session? (y/n)" "run-shell ~/.tmux/plugins/tmux-resurrect/scripts/restore.sh"

# * Notes

# set is equivalent to set-option
# setw -> set-window-option
# bind -> bind-key
# unbind -> unbind-key
# display -> display-message
# run -> run-shell
# if -> if-shell

# Colo'u'r table
# http://guns.github.io/xterm-color-table.vim/images/xterm-color-table.png

# CHARACTER PAIR       REPLACED WITH
#    #(command)        First line of command’s output
#    #[attributes]     Colour or attribute change
#    #H                Hostname of local host
#    #I                Current window index
#    #P                Current pane index
#    #S                Session name
#    #T                Current window title
#    #W                Current window name
#    ##                A literal ‘#’

# Variables used in time format
# Source: http://docs.splunk.com/Documentation/Splunk/5.0.2/SearchReference/Commontimeformatvariables
# %y = year in numbers (2-digit)
# %Y = year in numbers (4-digit)
# %m = month in number (eg: 12)
    # %B = full month name (eg: December)sho
# %b = short month name (eg: Dec)
# %d = day in numbers, with leading zeros (eg: 08)
# %e = day in numbers, no leading zeros (eg: 8)
# %A = full weekday name (eg: Sunday)
# %a = short weekday name (eg: Sun)
# %H = hours in 24-clock, with leading zeros
# %k = hours in 24-clock, no leading zeros
# %l = hours in 12-clock, with leading zeros
# %p = am/pm
# %T = time in 24-hour notation (%H:%M:%S)

# PREFIX ? : list-keys, display key bindings

# In command-prompt: show-options -g shows the global options
# In command-prompt: show-window-options -g shows the global windows options

# How do I know which tmux version I am running?
# tmux -V

# How to set bindings that don't need the prefix?
#   bind -n      .. or
#   bind -T root ..

# Changelog: https://github.com/tmux/tmux/blob/master/CHANGES

# style colors: default, black, red, green, yellow, blue, magenta, cyan, white,
#               colour0-colour255, hexdecimal RGB string '#ffffff'
# Use $SCRIPTS/bash/256-colors.sh to figure out the color number you want
# style attributes: none, bold/bright, dim, underscore, blink, reverse, hidden,
#                   or italics

# https://www.reddit.com/r/tmux/comments/3paqoi/tmux_21_has_been_released/cw552qd

# tmux buffers
# PREFIX # : List all paste buffers
# PREFIX - : Delete the most recently copied buffer of text
# PREFIX = : Choose which buffer to paste interactively from a list
# PREFIX ] : Paste the most recently copied buffer of text
