set nocompatible
set shell=zsh

" Some key maps
" This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

" Reload files changed outside vim
set autoread
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Don’t add empty newlines at the end of files
set binary
set noeol
" Centralize backups, swapfiles and undo history
set backupdir=$ZSH_VIM_BACKUPS//,.,/tmp
set directory=$ZSH_VIM_SWAPS//,.,/tmp
if exists("&undodir")
  set undodir=$ZSH_VIM_UNDO//,.,/tmp
endif
if has('persistent_undo')
  set undofile
endif

" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure
" Enable line numbers
set number
" Enable syntax highlighting
syntax on
" Highlight current line
set cursorline
" Convert tab to spaces
set expandtab
" Make tabs as wide as two spaces
set tabstop=2
" Some extra settings for indentation and tab
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
" Highlight 81st chars onward
augroup vimrc_autocmds
  autocmd BufEnter * highlight OverLength ctermbg=darkgrey guibg=#111111
  autocmd BufEnter * match OverLength /\%81v.*/
augroup END
" Highlight searches
set hlsearch
" Ignore case of searches ...
set ignorecase
" ... unless we type a capital
set smartcase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it’s being typed
set showcmd
" Use relative line numbers
if exists("&relativenumber")
	set relativenumber
	au BufReadPost * set relativenumber
endif
" Start scrolling 5 lines before the horizontal window border
set scrolloff=5

" ---- Key map
function! BuildCpp()
  if filereadable("./Makefile")
    make
  else
    execute("!g++ % -lcrypto -lpthread -o %<")
  endif
endfunction

function! BuildDebugCpp()
  if filereadable("./Makefile")
    make debug
  else
    execute("!g++ % -DDEBUG -g -lcrypto -lpthread -o %<")
  endif
endfunction

function! ToogleSyntasticCheck()
  if &runsyntastic
    set runsyntastic=0
    execute(":SyntasticCheck")
  else
    set runsyntastic=1
    execute(":SyntasticReset")
  endif
endfunction

" build & run
noremap <F5> :w <CR> :call BuildCpp() <CR> :!./%< <CR>
noremap! <F5> <Esc> :w <CR> :call BuildCpp() <CR> :!./%< <CR>
" build & debug
noremap <F9> :w <CR> :call BuildDebugCpp() <CR> :ConqueGdb %< <CR>
noremap! <F9> <Esc> :w <CR> :call BuildDebugCpp() <CR> :ConqueGdb %< <CR>
" save
noremap <F2> :w <CR>
noremap! <F2> <Esc> :w <CR>
" close
noremap <F10> :q <CR>
noremap! <F10> <Esc> :q <CR>

" Syntastic
nnoremap <F1> :call ToogleSyntasticCheck()<CR>
" Conque Gdb
nnoremap <silent> <Leader>q :ConqueGdbCommand q<CR>
nnoremap <silent> <F6> :ConqueGdbCommand continue<CR>
nnoremap <silent> <F7> :ConqueGdbCommand next<CR>
nnoremap <silent> <F8> :ConqueGdbCommand step<CR>
" toogle NERDTree
nnoremap <F3> :NERDTreeToggle<CR>
" toogle Tagbar
nmap <F4> :TagbarToggle<CR>

" ---- Vundle config
filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Additional plugin
Plugin 'tomtom/tcomment_vim'
Plugin 'andrewradev/splitjoin.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'scrooloose/nerdtree'
Plugin 'christoomey/vim-tmux-navigator'
" Need to install ctags for tagbar
Plugin 'majutsushi/tagbar'
Plugin 'vim-syntastic/syntastic'
Plugin 'vim-scripts/conque-gdb'

if has("unix")
  let s:uname = system("echo -n \"$(uname)\"")
  if !v:shell_error && s:uname == "Linux"
    Plugin 'valloric/youcompleteme'
    " Need to install YouCompleteMe
    " cd ~/.vim/bundle/YouCompleteMe
    " ./install.py --clang-completer
  endif
endif

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Additional config for YCM
let g:ycm_global_ycm_extra_conf = "~/.vim/ycm_extra_conf.py"
let g:ycm_show_diagnostics_ui = 0

" Additional config for Syntastic
let g:syntastic_cpp_compiler_options = ' -std=c++14'
let g:syntastic_cpp_check_header = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_mode_map = {
  \ "mode": "passive",
  \ "active_filetypes": [],
  \ "passive_filetypes": [] }

" Additional config for Conque Gdb
let g:ConqueGdb_Leader = ','
let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_CloseOnEnd = 1
let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_Color = 2

" Additional config for NERDtree
" autocmd VimEnter * if !argc() | NERDTree | endif
" autocmd VimEnter * wincmd w
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif